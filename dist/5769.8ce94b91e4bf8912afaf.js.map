{"version":3,"file":"5769.8ce94b91e4bf8912afaf.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport default debounce(updatePageTitle, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport setPageTitle from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: NodeJS.Timeout | undefined;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred } = payload;\n  const token = getCurrentTabId();\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, token]\n    : global.blurredTabTokens.filter((t) => t !== token));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  const isNewlyBlurred = isBlurred && blurredTabTokens.length === 1;\n\n  if (isNewlyBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = setInterval(() => {\n      global = getGlobal();\n      global = {\n        ...global,\n        notificationIndex: (global.notificationIndex || 0) + 1,\n        allNotificationsCount: getAllNotificationsCount(),\n      };\n      setGlobal(global);\n    }, NOTIFICATION_INTERVAL);\n  }\n\n  if (!blurredTabTokens.length && notificationInterval) {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n    global = {\n      ...global,\n      notificationIndex: undefined,\n    };\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { isInactive, notificationCount, tabId = getCurrentTabId() } = payload || {};\n\n  if (isInactive) {\n    setPageTitle(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (notificationCount) {\n    setPageTitle(`${notificationCount} notification${notificationCount > 1 ? 's' : ''}`);\n    return;\n  }\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${currentChat.title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(currentChat.title);\n      return;\n    }\n  }\n\n  setPageTitle(PAGE_TITLE);\n});\n\naddCallback((global: GlobalState) => {\n  if (global.notificationIndex === undefined || global.allNotificationsCount === undefined) return;\n  const { updatePageTitle } = getActions();\n\n  const index = global.notificationIndex;\n  const allNotificationsCount = global.allNotificationsCount;\n\n  if (document.title.includes(INACTIVE_MARKER) || !global.initialUnreadNotifications) {\n    updateIcon(false);\n    updatePageTitle();\n    return;\n  }\n\n  if (index % 2 === 0) {\n    const newUnread = allNotificationsCount - global.initialUnreadNotifications;\n    if (newUnread > 0) {\n      updatePageTitle({\n        notificationCount: newUnread,\n      });\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updatePageTitle();\n  updateIcon(false);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(global, chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type {\n  ActionReturnType, GlobalState, Thread,\n} from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n  selectTabState,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    // TODO Fix comments chat id, or refetch chat thread here\n    const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n    // Memoize drafts\n    const draftChatIds = Object.keys(global.messages.byChatId);\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n      acc[chatId] = {};\n      acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n      acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n      acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n      return acc;\n    }, {});\n\n    const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n    if (activeCurrentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, activeCurrentChatId, byId);\n        global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === activeCurrentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    // Restore drafts\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.keys(draftsByChatId).forEach((chatId) => {\n      global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n    });\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: activeCurrentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: activeCurrentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n\n    setGlobal(global);\n  }\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { migrateChat } from './chats';\nimport { getUserFirstOrLastName, isChatBasicGroup } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        // The property `isForum` was changed in another client\n        if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: (threadInfo.messagesCount || 0) + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n          actions.openPremiumModal({ isSuccess: true, tabId });\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      <MenuItem\n        icon=\"archive\"\n        onClick={onSelectArchived}\n      >\n        <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n        {archivedUnreadChatsCount > 0 && (\n          <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"char-K\"\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK, lang,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onScreenSelect={onScreenSelect}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (isMobile || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive, isMobile,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.includes(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          <SymbolMenuButton\n            chatId={chatId}\n            threadId={threadId}\n            isMobile={isMobile}\n            isReady={isReady}\n            isSymbolMenuOpen={isSymbolMenuOpen}\n            openSymbolMenu={openSymbolMenu}\n            closeSymbolMenu={closeSymbolMenu}\n            canSendStickers={canSendStickers}\n            canSendGifs={canSendGifs}\n            onGifSelect={handleGifSelect}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onRemoveSymbol={removeSymbol}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            closeBotCommandMenu={closeBotCommandMenu}\n            closeSendAsMenu={closeSendAsMenu}\n            isSymbolMenuForced={isSymbolMenuForced}\n          />\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n}) {\n  const { openLimitReachedModal } = getActions();\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        setAttachments(MEMO_EMPTY_ARRAY);\n        return;\n      }\n\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal, setAttachments],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","debounce","nextTitle","title","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","token","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","notificationIndex","allNotificationsCount","getAllNotificationsCount","initialUnreadNotifications","isInactive","notificationCount","setPageTitle","PAGE_TITLE","INACTIVE_MARKER","messageList","currentChat","topics","addCallback","getActions","index","newUnread","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","updateThread","loadTopics","loadTopicById","shouldCloseChatOnError","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","saveDraft","isEditing","updateDraft","prevState","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","useDraft","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","args","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","setCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}